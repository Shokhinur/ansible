# ---
# - name: Install and configure Nginx web server on Ubuntu
#   hosts: ubuntu
#   remote_user: ubuntu
#   become: yes
#   tasks:
#     - name: Update apt package index
#       ansible.builtin.apt:
#         update_cache: yes

#     - name: Install Nginx
#       ansible.builtin.apt:
#         name: nginx
#         state: present

#     - name: Ensure Nginx is started and enabled on boot
#       ansible.builtin.service:
#         name: nginx
#         state: started
#         enabled: yes

#     - name: Confirm Nginx is running
#       ansible.builtin.systemd:
#         name: nginx
#         state: started
#         enabled: yes

#     - name: Check if Nginx is running
#       ansible.builtin.shell: systemctl is-active nginx
#       register: nginx_status

#     - name: Print Nginx status
#       ansible.builtin.debug:
#         msg: "Nginx is {{ nginx_status.stdout }}"
#     - name: install mysql server
#       yum:
#         name: mysql
#         state: present
#     - name: install mysql client
#       yum:
#         name: mysql
#         state: present
#     - name: start mysql server
#       service:
#         name: mysql
#         state: started
#         enabled: yes
#     - name: Update apt cache
#       apt:
#         update_cache: yes

#     - name: Install Node.js dependencies
#       apt:
#         name: "{{ item }}"
#         state: present
#       loop:
#         - curl
#         - software-properties-common

#     - name: Add NodeSource repository
#       apt_repository:
#         repo: "deb https://deb.nodesource.com/node_14.x {{ ansible_distribution_release }} main"
#         state: present
#         update_cache: yes
#         filename: nodesource

#     - name: Install Node.js
#       apt:
#         name: nodejs
#         state: present

#     - name: Install build-essential
#       apt:
#         name: build-essential
#         state: present
        

---
- name: Install and configure web servers, SQL, Node.js packages
  hosts: ubuntu
  remote_user: ubuntu
  become: yes
  tasks:
    - name: Update apt package index
      ansible.builtin.apt:
        update_cache: yes
      when: ansible_os_family == 'Debian'

    - name: Update yum package index
      ansible.builtin.yum:
        update_cache: yes
      when: ansible_os_family == 'RedHat'

    - name: Install packages for Debian
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      loop:
        - nginx
        - mysql-server
        - mysql-client
        - nodejs
        - npm
      when: ansible_os_family == 'Debian'

    - name: Install packages for RedHat
      ansible.builtin.yum:
        name: "{{ item }}"
        state: present
      loop:
        - nginx
        - mysql-server
        - mysql
        - nodejs
      when: ansible_os_family == 'RedHat'

    - name: Ensure services are started and enabled
      ansible.builtin.service:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - nginx
        - mysql
        - nodejs
      when: ansible_os_family == 'RedHat' or ansible_os_family == 'Debian'



- name: Install and configure web servers, SQL, Node.js packages
  hosts: amazon-linux
  remote_user: ubuntu
  become: yes
  tasks:
    - name: Update apt package index
      ansible.builtin.apt:
        update_cache: yes
      when: ansible_os_family == 'Debian'

    - name: Update yum package index
      ansible.builtin.yum:
        update_cache: yes
      when: ansible_os_family == 'RedHat'

    - name: Install packages for Debian
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      loop:
        - nginx
        - mysql-server
        - mysql-client
        - nodejs
        - npm
      when: ansible_os_family == 'Debian'

    - name: Install packages for RedHat
      ansible.builtin.yum:
        name: "{{ item }}"
        state: present
      loop:
        - nginx
        - mysql-server
        - mysql
        - nodejs
      when: ansible_os_family == 'RedHat'

    - name: Ensure services are started and enabled
      ansible.builtin.service:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - nginx
        - mysql
        - nodejs
      when: ansible_os_family == 'RedHat' or ansible_os_family == 'Debian'


